{"paragraphs":[{"text":"print(s\"\"\"%html\n<center>\n    <h1><a href=\"http://diplodatos.famaf.unc.edu.ar/\">Diplomatura en Ciencia de Datos, Aprendizaje Automático y sus Aplicaciones</a></h1>\n    <h2>Curso <a href=\"https://sites.google.com/view/eleccion-optativas-diplodatos/programaci%C3%B3n-distribu%C3%ADda-sobre-grandes-vol%C3%BAmenes-de-datos\">Programación Distribuida sobre Grandes Volúmenes de Datos</a></h2>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\"> Damián Barsotti  </h3>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de Matemática Astronomía Física y Computación\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de Córdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"$baseDir/comun/logo%20UNC%20FAMAF%202016.png\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n\"\"\")\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:46-0300","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<center>\n    <h1><a href=\"http://diplodatos.famaf.unc.edu.ar/\">Diplomatura en Ciencia de Datos, Aprendizaje Automático y sus Aplicaciones</a></h1>\n    <h2>Curso <a href=\"https://sites.google.com/view/eleccion-optativas-diplodatos/programaci%C3%B3n-distribu%C3%ADda-sobre-grandes-vol%C3%BAmenes-de-datos\">Programación Distribuida sobre Grandes Volúmenes de Datos</a></h2>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\"> Damián Barsotti  </h3>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de Matemática Astronomía Física y Computación\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de Córdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases/comun/logo%20UNC%20FAMAF%202016.png\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n"}]},"apps":[],"jobName":"paragraph_1604845774991_-1931320726","id":"20171010-191319_1407757246","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:62398"},{"title":"Antes de comenzar","text":"%md\n### Antes de comenzar\n\n1. Actualizar repo:\n```sh\ncd diplodatos_bigdata\ngit pull\n```\n\n1. Lanzar [Zeppelin](http://zeppelin.apache.org/):\n```sh\nconda activate python-zeppelin\ncd spark/zeppelin-0.8.2-bin-all\n./bin/zeppelin.sh\n```\n1. En navegador abrir [http://localhost:8080](http://localhost:8080) o `http://nabucodonosor.ccad.unc.edu.ar:<mi puerto>`\n1. Seleccionar `Import note`\n1. Elegir json en `diplodatos_bigdata/clases/07_grafos/note.json`\n2. Seleccionar `Clase 07 - Grandes Grafos Sociales`\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:46-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"title":false,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Antes de comenzar</h3>\n<ol>\n  <li>\n  <p>\n  <p>Actualizar repo:</p>\n  <pre><code class=\"sh\">cd diplodatos_bigdata\ngit pull\n</code></pre></p></li>\n  <li>\n  <p>Lanzar <a href=\"http://zeppelin.apache.org/\">Zeppelin</a>:</p>\n  <pre><code class=\"sh\">conda activate python-zeppelin\ncd spark/zeppelin-0.8.2-bin-all\n./bin/zeppelin.sh\n</code></pre></li>\n  <li>En navegador abrir <a href=\"http://localhost:8080\">http://localhost:8080</a> o <code>http://nabucodonosor.ccad.unc.edu.ar:&lt;mi puerto&gt;</code></li>\n  <li>Seleccionar <code>Import note</code></li>\n  <li>Elegir json en <code>diplodatos_bigdata/clases/07_grafos/note.json</code></li>\n  <li>Seleccionar <code>Clase 07 - Grandes Grafos Sociales</code></li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774991_418024711","id":"20171026-104737_1316799732","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62399"},{"text":"%md\n# Grandes Grafos Sociales","user":"anonymous","dateUpdated":"2020-11-08T19:53:46-0300","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Grandes Grafos Sociales</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774991_581317314","id":"20171101-121050_1177283744","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62400"},{"text":"%md\n### Ejemplo Red de Usuarios Twitter","user":"anonymous","dateUpdated":"2020-11-08T19:53:46-0300","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Ejemplo Red de Usuarios Twitter</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774992_-2017818629","id":"20181024-105040_178046617","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62401"},{"title":"Load Tweets","text":"%pyspark\n\ntweets = spark.read.parquet(\"../../diplodatos_bigdata/ds/tweets.pqt\")\n\nprint(\"Cantidad de tweets:\", tweets.count())\n\nz.show(tweets.limit(10))\n# RT_times es la cantidad de veces que el usuario retweeteo el tweet\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:46-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"title":true,"results":{"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"timestamp":"string","user":"string","RT_by":"string","RT_times":"string","text":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Cantidad de tweets: 172040\n"},{"type":"TABLE","data":"timestamp\tuser\tRT_by\tRT_times\ttext\n1487970896\tierrejon\tteresapititesa\t2\tRT @ierrejon: Aulas masificadas, falta de profesorado, precariedad laboral para docentes... ¿Así pretende el PP garantizar el fut…\n1487971010\tRobiBaradel\titoferrero\t1\tRT @RobiBaradel: Nos parece muy sano que los ciudadanos sumen su tiempo y su compromiso a la Educación Pública, los esperamos todo e…\n1487971052\tvilma_ripoll\tPabloIannuzzi\t3\tRT @vilma_ripoll: Los \"voluntarios\"contra el paro docente, son carneros. Los docentes defienden su salario y la escuela pública. Apoyemos e…\n1487971121\tfargosi\tPiaAsao\t3\tRT @fargosi: Hay otros medios de protesta. Las huelgas docentes son inconstitucionales por las convenciones de Derechos del Niño. Jueces, a…\n1487971177\tGFrondizi\ttepergmailcomP1\t3\tRT @GFrondizi: Pido algún fiscal por incumplimiento del deber de educar a los niños de la nación\nPena con cárcel p baradel\nExijo q…\n1487971184\tRobiBaradel\tAnaliavc1\t41\tRT @RobiBaradel: Nos parece muy sano que los ciudadanos sumen su tiempo y su compromiso a la Educación Pública, los esperamos todo e…\n1487971345\tSuperSecretario\tari2271\t12\tRT @SuperSecretario: #Cambiemos sacó solo 1,5% pq en su spot no prometió Voluntarios para reemplazar Docentes. Si se avivaban arrasaban!\nh…\n1487971368\tMarinaVolpe12\tBocaLocura312\t1\tRT @MarinaVolpe12: No se ofrezcan nunca como Médicos voluntarios.Si hacen como MM, te saca el hígado y pide disculpas xq se equivovó #Volun…\n1487971408\tlanacionmas\tsusanamartimari\t2\tRT @lanacionmas: ¿Qué opinás de la propuesta #VoluntarioDocenteNoAlParo que se generó en las redes sociales a partir del paro nacional? #La…\n1487971469\taeronauticosCFK\tandrea7533\t17\tRT @aeronauticosCFK: #ApoyoALosMaestros\nPara estas cosas sobra la guita. Son patéticos\nhttps://t.co/6BW6eGZYpT\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774992_-1192927933","id":"20171101-124010_495006264","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:53:46-0300","dateFinished":"2020-11-08T19:53:46-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62402"},{"text":"%md\n### Definición de la red de usuarios:\n\n* **Usuario A está conectado con usuario B** si B retweeteó un mensaje de A.\n* Queremos también la cantidad de retweets que hizo B de mensajes de A **distintos o no**.","user":"anonymous","dateUpdated":"2020-11-08T19:53:46-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Definición de la red de usuarios:</h3>\n<ul>\n  <li><strong>Usuario A está conectado con usuario B</strong> si B retweeteó un mensaje de A.</li>\n  <li>Queremos también la cantidad de retweets que hizo B de mensajes de A <strong>distintos o no</strong>.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774992_-1985576979","id":"20181024-111922_1953182558","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62403"},{"title":"Generamos las conecciones por usuarios","text":"%pyspark\n\nfrom pyspark.sql.functions import sum, count\n\ntwitterConnections = tweets \\\n                        .groupBy(\"user\", \"RT_by\") \\\n                        .agg(sum(\"RT_times\").alias(\"count_RT\"), count(\"*\").alias(\"count_distinct_RT\"))\n\nprint(\"Cantidad de conecciones:\", twitterConnections.count())\n\nz.show(twitterConnections.limit(20))\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:46-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"user":"string","RT_by":"string","count_RT":"string","count_distinct_RT":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"user":"string","RT_by":"string","count_RT":"string","count_distinct_RT":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Cantidad de conecciones: 152613\n"},{"type":"TABLE","data":"user\tRT_by\tcount_RT\tcount_distinct_RT\nWolffWaldo\txenia43sailor\t69\t1\natlanticsurff\tpaulobeni\t8\t1\nRuben_Rischmann\tPPperonoelsapo\t23\t1\nWolffWaldo\tMariePes72\t14\t1\nromerodiario\tRcaRawson\t4\t1\npablen2012\tNattyJuliAle\t4\t1\nMaestroPortenio\tsamuelevyARG\t14\t1\nLaAlfareraOk\taka_Mister\t33\t1\nertenembaum\tfertso\t4\t1\nBrujaUniversal\tO_Fer_\t6\t1\nmis2centavos\tmapolo1978\t2\t1\nlucaslauriente\t_Felpa_\t1\t1\nPajaritaTW\toscarcapellini\t6\t1\nArgentinaSoy1\t88lamaga\t82\t1\nel_telegrafo\tamaia78\t1\t1\nDEM___\taquisiclaudia\t79\t1\nLauraadri\tarturomakko\t12\t1\nscorohernan\tgustavospektor\t6\t1\nCondenaNacional\tSyl_Vicious\t3\t1\nhanalfabeto\tOsvaM55\t18\t2\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774992_-1710252765","id":"20171101-121958_1394663112","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:53:46-0300","dateFinished":"2020-11-08T19:53:47-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62404"},{"text":"%md\n## GraphFrames\n\n* Utiliza la interface Spark SQL (Dataframes).\n* Creada por [Databricks](https://databricks.com/).\n* Por ahora no viene en la distribución estandard de Spark (solo [GraphX](http://spark.apache.org/graphx/) sobre RDD's).\n* Algoritmos ya implementados como: \n    - Breadth-first search (BFS)\n    - Componentes (fuertemente) conexas\n    - Label Propagation Algorithm (para detectar comunidades)\n    - PageRank\n    - Shortest paths\n    - Triangle count.\n* **Agregación de mensajes** para hacer algoritmos.\n* **Motif finding** para queries. \n\n### Documentación:\n\n* [User Guide](https://graphframes.github.io/graphframes/docs/_site/user-guide.html).\n* [User Guide - Python](https://docs.databricks.com/spark/latest/graph-analysis/graphframes/user-guide-python.html).\n* [Documentación de la API](https://graphframes.github.io/graphframes/docs/_site/api/python/index.html).\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:47-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>GraphFrames</h2>\n<ul>\n  <li>Utiliza la interface Spark SQL (Dataframes).</li>\n  <li>Creada por <a href=\"https://databricks.com/\">Databricks</a>.</li>\n  <li>Por ahora no viene en la distribución estandard de Spark (solo <a href=\"http://spark.apache.org/graphx/\">GraphX</a> sobre RDD&rsquo;s).</li>\n  <li>Algoritmos ya implementados como:\n    <ul>\n      <li>Breadth-first search (BFS)</li>\n      <li>Componentes (fuertemente) conexas</li>\n      <li>Label Propagation Algorithm (para detectar comunidades)</li>\n      <li>PageRank</li>\n      <li>Shortest paths</li>\n      <li>Triangle count.</li>\n    </ul>\n  </li>\n  <li><strong>Agregación de mensajes</strong> para hacer algoritmos.</li>\n  <li><strong>Motif finding</strong> para queries.</li>\n</ul>\n<h3>Documentación:</h3>\n<ul>\n  <li><a href=\"https://graphframes.github.io/graphframes/docs/_site/user-guide.html\">User Guide</a>.</li>\n  <li><a href=\"https://docs.databricks.com/spark/latest/graph-analysis/graphframes/user-guide-python.html\">User Guide - Python</a>.</li>\n  <li><a href=\"https://graphframes.github.io/graphframes/docs/_site/api/python/index.html\">Documentación de la API</a>.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774992_501611036","id":"20171102-112550_410534992","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:53:47-0300","dateFinished":"2020-11-08T19:53:47-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62405"},{"text":"%md\n### Creación de grafo\n\n* Se crean a partir de `DataFrame` de aristas y/o vértices.\n* DataFrame de aristas debe tener las columnas `src` y `dst` (por lo menos).\n* DataFrame de vértices debe tener la columna `id` (por lo menos).\n* Los grafos son dirigidos.\n* Se almacenan con redundancia (vertex cut):\n  ![](http://spark.apache.org/docs/latest/img/edge_cut_vs_vertex_cut.png)\n\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:47-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Creación de grafo</h3>\n<ul>\n  <li>Se crean a partir de <code>DataFrame</code> de aristas y/o vértices.</li>\n  <li>DataFrame de aristas debe tener las columnas <code>src</code> y <code>dst</code> (por lo menos).</li>\n  <li>DataFrame de vértices debe tener la columna <code>id</code> (por lo menos).</li>\n  <li>Los grafos son dirigidos.</li>\n  <li>Se almacenan con redundancia (vertex cut):<br/> <img src=\"http://spark.apache.org/docs/latest/img/edge_cut_vs_vertex_cut.png\" /></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774993_1869933078","id":"20181027-002925_1222103561","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62406"},{"text":"%md\n### Veamos un ejemplo pequeño:\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:47-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Veamos un ejemplo pequeño:</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774993_-1274846128","id":"20201030-111511_962191836","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62407"},{"text":"%pyspark\n\nfrom graphframes import *\n\n# DataFrame de vértices\nv = spark.createDataFrame([\n  (\"a\", \"Alice\", 34),\n  (\"b\", \"Bob\", 36),\n  (\"c\", \"Charlie\", 30),\n  (\"d\", \"David\", 29),\n  (\"e\", \"Esther\", 32),\n  (\"f\", \"Fanny\", 36),\n  (\"g\", \"Gabby\", 60)\n],[\"id\", \"name\", \"age\"])\n\n# DataFrame de aristas\ne = spark.createDataFrame([\n  (\"a\", \"b\", \"amigo\"),\n  (\"b\", \"c\", \"sigue\"),\n  (\"c\", \"b\", \"sigue\"),\n  (\"f\", \"c\", \"sigue\"),\n  (\"e\", \"f\", \"sigue\"),\n  (\"e\", \"d\", \"amigo\"),\n  (\"d\", \"a\", \"amigo\"),\n  (\"a\", \"e\", \"amigo\"),\n  (\"a\", \"h\", \"amigo\")\n], [\"src\", \"dst\", \"relationship\"])\n\n# Creacion de GraphFrame\ng = GraphFrame(v, e)\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:47-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1604845774993_-929948832","id":"20181027-003337_2137373030","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:53:47-0300","dateFinished":"2020-11-08T19:53:47-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62408"},{"text":"%pyspark\n\nz.show(g.vertices)\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:47-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":304,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","name":"string","age":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\tname\tage\na\tAlice\t34\nb\tBob\t36\nc\tCharlie\t30\nd\tDavid\t29\ne\tEsther\t32\nf\tFanny\t36\ng\tGabby\t60\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774993_1254222422","id":"20181027-004033_1700498403","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:53:47-0300","dateFinished":"2020-11-08T19:53:47-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62409"},{"text":"%pyspark\n\nz.show(g.edges)\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:47-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":356,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"src":"string","dst":"string","relationship":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"src\tdst\trelationship\na\tb\tamigo\nb\tc\tsigue\nc\tb\tsigue\nf\tc\tsigue\ne\tf\tsigue\ne\td\tamigo\nd\ta\tamigo\na\te\tamigo\na\th\tamigo\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774993_2137226875","id":"20181027-004041_1915960464","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:53:47-0300","dateFinished":"2020-11-08T19:53:47-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62410"},{"text":"%pyspark\n\n# Query: Get in-degree of each vertex.\nz.show(g.inDegrees)\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:47-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","inDegree":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\tinDegree\nf\t1\ne\t1\nh\t1\nd\t1\nc\t2\nb\t2\na\t1\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774994_-1340520338","id":"20191205-202553_1454342767","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:53:47-0300","dateFinished":"2020-11-08T19:53:47-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62411"},{"text":"%pyspark\n\n\n# Query: Count the number of \"follow\" connections in the graph.\n\nprint(\"Cantidad de amistades:\", \n        g.edges.filter(\"relationship = 'amigo'\").count())\n\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:48-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Cantidad de amistades: 5\n"}]},"apps":[],"jobName":"paragraph_1604845774994_616056681","id":"20191205-202527_215305701","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:53:48-0300","dateFinished":"2020-11-08T19:53:48-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62412"},{"title":"PageRank","text":"%pyspark\n\n# Run PageRank algorithm, and show results.\nresults = g.pageRank(resetProbability=0.01, maxIter=10)\n\nz.show(results.vertices.select(\"id\", \"pagerank\"))\n","user":"anonymous","dateUpdated":"2020-11-08T19:53:48-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"id","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"pagerank","visible":true,"width":"*","sort":{"priority":0,"direction":"desc"},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"id":"string","pagerank":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\tpagerank\ng\t0.011647254575707162\nb\t3.6199424699159937\ne\t0.03848486478566412\na\t0.05421739436354941\nf\t0.0347707909956736\nd\t0.0347707909956736\nc\t3.206166434367738\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774994_-1593582731","id":"20191205-202719_809801770","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:53:48-0300","dateFinished":"2020-11-08T19:54:05-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62413"},{"title":"Guardemos el grafo","text":"%pyspark\nfrom pyspark.sql.functions import col\n\ng.edges.printSchema()\n\ng.edges \\\n        .select(col(\"src\").alias(\"Source\"), \n                col(\"dst\").alias(\"Target\"), \n                \"relationship\") \\\n        .coalesce(1) \\\n        .write \\\n        .csv(\"g_edges.csv\", mode=\"overwrite\", header=True)\n\n# Ver que pasa sin coalesce","user":"anonymous","dateUpdated":"2020-11-08T19:54:05-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- src: string (nullable = true)\n |-- dst: string (nullable = true)\n |-- relationship: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1604845774994_-1947059730","id":"20201029-163912_1652236873","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:06-0300","dateFinished":"2020-11-08T19:54:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62414"},{"text":"%md\n\n### Volvamos a los tweets","user":"anonymous","dateUpdated":"2020-11-08T19:54:06-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Volvamos a los tweets</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774994_982745060","id":"20191205-203200_861269696","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62415"},{"title":"Hay que renombrar las conexiones de tweeter:","text":"%pyspark\n\nfrom pyspark.sql.functions import col\n\nedgesDF = twitterConnections \\\n    .select(col(\"user\").alias(\"src\"), \n            col(\"RT_by\").alias(\"dst\"),\n            \"count_RT\", \"count_distinct_RT\")\n                                       \nz.show(edgesDF.limit(10))\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:06-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"src":"string","dst":"string","count_RT":"string","count_distinct_RT":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"src\tdst\tcount_RT\tcount_distinct_RT\nWolffWaldo\txenia43sailor\t69\t1\natlanticsurff\tpaulobeni\t8\t1\nRuben_Rischmann\tPPperonoelsapo\t23\t1\nWolffWaldo\tMariePes72\t14\t1\nromerodiario\tRcaRawson\t4\t1\npablen2012\tNattyJuliAle\t4\t1\nMaestroPortenio\tsamuelevyARG\t14\t1\nLaAlfareraOk\taka_Mister\t33\t1\nertenembaum\tfertso\t4\t1\nBrujaUniversal\tO_Fer_\t6\t1\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774994_1988541113","id":"20171101-124136_101875926","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:06-0300","dateFinished":"2020-11-08T19:54:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62416"},{"title":"Hay que crear el DF de vértices","text":"%pyspark\n\nsrcs = edgesDF.select(col(\"src\").alias(\"id\"))\n\ndsts = edgesDF.select(col(\"dst\").alias(\"id\"))\n    \nvertexDF = srcs.unionAll(dsts).distinct()\n\nz.show(vertexDF.limit(10))\n    ","user":"anonymous","dateUpdated":"2020-11-08T19:54:06-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\nElGorilaje\nflordecaribe\nl_p_o\nPiru_laura\nbudano_ignacio\nRepettoLidia\nLilianaTren\ndefensoria_bol\nMIGUE67MIGUE\ncarlito60322427\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774995_-897581366","id":"20191206-163757_2138250663","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:06-0300","dateFinished":"2020-11-08T19:54:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62417"},{"title":"Creación de GraphFrame:","text":"%pyspark\n\nfrom graphframes import *\n\ngraph = GraphFrame(vertexDF, edgesDF).cache()\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:06-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1604845774995_504597263","id":"20171101-124739_82230555","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:06-0300","dateFinished":"2020-11-08T19:54:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62418"},{"text":"%md\n### Operaciones básicas sobre grafos\n\n#### A continuación veremos como calcular: \n* la cantidad de vértices (usuarios)\n* la cantidad de arístas (conexiones)\n* el grado de cada vértice (cantidad de conexiones por usuario)","user":"anonymous","dateUpdated":"2020-11-08T19:54:06-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Operaciones básicas sobre grafos</h3>\n<h4>A continuación veremos como calcular:</h4>\n<ul>\n  <li>la cantidad de vértices (usuarios)</li>\n  <li>la cantidad de arístas (conexiones)</li>\n  <li>el grado de cada vértice (cantidad de conexiones por usuario)</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774995_443769228","id":"20171102-153102_880120870","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62419"},{"title":"Tamaño del grafo","text":"%pyspark\n\nverticesCount = graph.vertices.count()\nprint(\"Cantidad de nodos:\", verticesCount)\n\nedgesCount = graph.edges.count()\nprint(\"Cantidad de conecciones: \", edgesCount)\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:06-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Cantidad de nodos: 57138\nCantidad de conecciones:  152613\n"}]},"apps":[],"jobName":"paragraph_1604845774995_-812349937","id":"20171101-124845_773490911","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:06-0300","dateFinished":"2020-11-08T19:54:07-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62420"},{"title":"Cantidad de conecciones por usuario","text":"%pyspark\n\nnodesDegree = graph.degrees\n\nsortedByDegree = nodesDegree.orderBy(\"degree\", ascending=False)\n\nz.show(sortedByDegree.limit(10))\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:07-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","degree":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\tdegree\nWinston_Dunhill\t2325\nfernandocarnota\t1745\nsantosjorgeh\t1657\nlanatoparatodos\t1529\nRobiBaradel\t1483\nJorgeFavaloro\t1483\nelcoya1977\t1471\neldestapeweb\t1441\nlucaslauriente\t1422\nbetovaldez\t1407\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774995_1148870681","id":"20171102-131720_1147432214","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:07-0300","dateFinished":"2020-11-08T19:54:08-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62421"},{"text":"%md\n\n## Ejemplo Agregación de Mensajes\n\n### Influencia Colectiva\n\n#### Aplicaciones: \n* Marketing viral (influencia de opinión)\n* Detección de focos de dispersión de enfermedades\n* ...\n\n#### Cómo funciona:\n* Primero se calcula la **Influencia Colectiva (CI)**\n* En cada iteración elimina del grafo el nodo de mayor CI y recalcula el CI de los nodos restantes\n* Termina cuando la componente gigante se destruye\n* Solución básica: \\\\(O(N2)\\\\). Optimizada: \\\\(O(NlogN)\\\\)\n\n> Influence maximization in complex networks through optimal percolation” (Flaviano Morone, Hernán A. Makse, 27 Jun 2015) https://arxiv.org/abs/1506.08326\n\n\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:08-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Ejemplo Agregación de Mensajes</h2>\n<h3>Influencia Colectiva</h3>\n<h4>Aplicaciones:</h4>\n<ul>\n  <li>Marketing viral (influencia de opinión)</li>\n  <li>Detección de focos de dispersión de enfermedades</li>\n  <li>&hellip;</li>\n</ul>\n<h4>Cómo funciona:</h4>\n<ul>\n  <li>Primero se calcula la <strong>Influencia Colectiva (CI)</strong></li>\n  <li>En cada iteración elimina del grafo el nodo de mayor CI y recalcula el CI de los nodos restantes</li>\n  <li>Termina cuando la componente gigante se destruye</li>\n  <li>Solución básica: \\(O(N2)\\). Optimizada: \\(O(NlogN)\\)</li>\n</ul>\n<blockquote>\n  <p>Influence maximization in complex networks through optimal percolation” (Flaviano Morone, Hernán A. Makse, 27 Jun 2015) <a href=\"https://arxiv.org/abs/1506.08326\">https://arxiv.org/abs/1506.08326</a></p>\n</blockquote>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774995_821766048","id":"20171102-132006_1774167041","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62422"},{"text":"%md\n### Fórmula de CI\n\nLa formula de collective influence para un vértice \\\\(i\\\\) es:\n\n$$ CI(i) = (degree_i -  1) \\times \\sum\\limits_{j \\in vecinos(i)} (degree_j -  1)$$\n\nSe supone un grafo **no dirigido**.\n\n### Pasos para calcular collective influence son:\n\n* agregar el grado (degree) de cada nodo al grafo.\n* importar `AggregateMessages`.\n* calcular collective influence de cada individuo usando `AggregateMessages` de `GraphFrame`\n* ordenar los individuos por su collective influence de mayor a menor\n* imprimir el listado de individuos\n\n\n#### Documentación para implementar con GraphFrames:\n\n* Documentación sobre [AggregateMessages](https://graphframes.github.io/graphframes/docs/_site/user-guide.html#message-passing-via-aggregatemessages) con ejemplo.\n* Documentación de [API AggregateMessages](https://graphframes.github.io/graphframes/docs/_site/api/python/graphframes.html).\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:08-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Fórmula de CI</h3>\n<p>La formula de collective influence para un vértice \\(i\\) es:</p>\n<p>$$ CI(i) = (degree_i - 1) \\times \\sum\\limits_{j \\in vecinos(i)} (degree_j - 1)$$</p>\n<p>Se supone un grafo <strong>no dirigido</strong>.</p>\n<h3>Pasos para calcular collective influence son:</h3>\n<ul>\n  <li>agregar el grado (degree) de cada nodo al grafo.</li>\n  <li>importar <code>AggregateMessages</code>.</li>\n  <li>calcular collective influence de cada individuo usando <code>AggregateMessages</code> de <code>GraphFrame</code></li>\n  <li>ordenar los individuos por su collective influence de mayor a menor</li>\n  <li>imprimir el listado de individuos</li>\n</ul>\n<h4>Documentación para implementar con GraphFrames:</h4>\n<ul>\n  <li>Documentación sobre <a href=\"https://graphframes.github.io/graphframes/docs/_site/user-guide.html#message-passing-via-aggregatemessages\">AggregateMessages</a> con ejemplo.</li>\n  <li>Documentación de <a href=\"https://graphframes.github.io/graphframes/docs/_site/api/python/graphframes.html\">API AggregateMessages</a>.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774996_-423150176","id":"20171102-131904_821311339","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62423"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import sum\nfrom graphframes.lib import AggregateMessages as AM\n\n#Cree un nuevo grafo usando los nodos con su degree disponible en nodesDegree y las aristas originales\ndegreeGraph = GraphFrame(nodesDegree, graph.edges )\n# Aristas y vértices están bien particionadas\n\n\n# Comenzamos a calcular CI: Por cada nodo calcula la sumatoria del degree-1 de sus vecinos.\n# El DataFrame sumNeighborDegrees debe tener 2 columnas: id, sum_neighbor_degree \n\nmsgToSrc = AM.dst[\"degree\"] - 1\nmsgToDst = AM.src[\"degree\"] - 1\n\nsumNeighborDegrees = degreeGraph.aggregateMessages(\n    sum(AM.msg).alias(\"sum_neighbor_degree\"), # Hacer aggregation sobre el valor de AM.msg\n    sendToSrc=msgToSrc, #  send destination user's age to source\n    sendToDst=msgToDst) # send source user's age to destination\n\n\n# Join de sumNeighborDegrees con degrees para tener todas las columnas necesarias para calcular CI.\n\nnodesDegreeJoin = nodesDegree.join(sumNeighborDegrees,\"id\")\n\n# Calculamos CI: para terminar de calcularlo debemos multiplicar la sumatoria del paso anterior por degree - 1 de cada nodo.\n# El DataFrame collectiveInfluence debe tener 2 columnas: id, ci y degree\n# Por ultimo ordena descendentemente por ci \n\ncollectiveInfluence = nodesDegreeJoin \\\n                          .select( ((col(\"degree\") - 1) * col(\"sum_neighbor_degree\")).alias(\"ci\"), \n                                    \"id\", \n                                    \"degree\") \\\n                          .orderBy(\"ci\", ascending=False) \\\n                          .cache()\n\nz.show(collectiveInfluence.limit(20))\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:08-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"ci":"string","id":"string","degree":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"ci\tid\tdegree\n71551312\tWinston_Dunhill\t2325\n57822552\tsantosjorgeh\t1657\n55026688\tfernandocarnota\t1745\n45848634\tJorgeFavaloro\t1483\n42052088\tlanatoparatodos\t1529\n37856910\telcoya1977\t1471\n33925374\tbetovaldez\t1407\n31175045\tLaBelgrana\t606\n30129480\tfargosi\t1271\n29494764\tRobiBaradel\t1483\n27043120\tcopi__\t1041\n23379462\tNunkMasKs\t1027\n18770024\tConCiencia2015\t533\n17316472\tWolffWaldo\t812\n16165470\tHugoYasky\t987\n15975882\tmis2centavos\t1020\n15693120\teldestapeweb\t1441\n15118908\tCarlos_AD_Viola\t533\n14284499\tCTAok\t830\n14149350\tEdgardoRovira\t1176\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774996_228484575","id":"20171101-125025_1054455316","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:08-0300","dateFinished":"2020-11-08T19:54:08-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62424"},{"text":"%md\n## Motif Finding\n\n* Es un Domain-Specific Language (DSL) para expresar queries.\n* La unidad básica es la expresión de una arista\n\n### Ejemplos\n\n* `graph.find(\"(a)-[e]->(b); (b)-[e2]->(a)\")` expresa vértices unidos en ambas direcciones.\n    - Devuelve un DataFrame con columnas `\"a\"`, `\"b\"`, `\"e\"` y `\"e2\"`.\n* `graph.find(\"(a)-[e]->(b); (b)-[e2]->(c)\")` expresa dos aristas pegadas con un vértice común `b`. \n\n### Documentacion y ejemplo\n\n* [GraphFrame User Guide](https://graphframes.github.io/graphframes/docs/_site/user-guide.html#motif-finding).\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:08-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Motif Finding</h2>\n<ul>\n  <li>Es un Domain-Specific Language (DSL) para expresar queries.</li>\n  <li>La unidad básica es la expresión de una arista</li>\n</ul>\n<h3>Ejemplos</h3>\n<ul>\n  <li><code>graph.find(&quot;(a)-[e]-&gt;(b); (b)-[e2]-&gt;(a)&quot;)</code> expresa vértices unidos en ambas direcciones.\n    <ul>\n      <li>Devuelve un DataFrame con columnas <code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, <code>&quot;e&quot;</code> y <code>&quot;e2&quot;</code>.</li>\n    </ul>\n  </li>\n  <li><code>graph.find(&quot;(a)-[e]-&gt;(b); (b)-[e2]-&gt;(c)&quot;)</code> expresa dos aristas pegadas con un vértice común <code>b</code>.</li>\n</ul>\n<h3>Documentacion y ejemplo</h3>\n<ul>\n  <li><a href=\"https://graphframes.github.io/graphframes/docs/_site/user-guide.html#motif-finding\">GraphFrame User Guide</a>.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774996_609456661","id":"20181027-013740_419047675","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62425"},{"text":"%pyspark\n\nz.show(g.find(\"(a)-[e]->(b); (b)-[e2]->(a)\"))\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:08-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"a":"string","e":"string","b":"string","e2":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"a\te\tb\te2\n[c,Charlie,30]\t[c,b,sigue]\t[b,Bob,36]\t[b,c,sigue]\n[b,Bob,36]\t[b,c,sigue]\t[c,Charlie,30]\t[c,b,sigue]\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774996_387534582","id":"20181027-015215_1027188878","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:08-0300","dateFinished":"2020-11-08T19:54:09-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62426"},{"text":"%pyspark\n\n# Buscar pares de vértices en ambas direccione:\nmotifs = g.find(\"(a)-[e1]->(b); (b)-[e2]->(a)\")\n\nmotifs.printSchema()\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:09-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- a: struct (nullable = false)\n |    |-- id: string (nullable = true)\n |    |-- name: string (nullable = true)\n |    |-- age: long (nullable = true)\n |-- e1: struct (nullable = false)\n |    |-- src: string (nullable = true)\n |    |-- dst: string (nullable = true)\n |    |-- relationship: string (nullable = true)\n |-- b: struct (nullable = false)\n |    |-- id: string (nullable = true)\n |    |-- name: string (nullable = true)\n |    |-- age: long (nullable = true)\n |-- e2: struct (nullable = false)\n |    |-- src: string (nullable = true)\n |    |-- dst: string (nullable = true)\n |    |-- relationship: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1604845774997_707288980","id":"20181027-015100_1394496292","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:09-0300","dateFinished":"2020-11-08T19:54:09-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62427"},{"text":"%pyspark\n\nz.show(motifs)\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:09-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"a":"string","e1":"string","b":"string","e2":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"a\te1\tb\te2\n[c,Charlie,30]\t[c,b,sigue]\t[b,Bob,36]\t[b,c,sigue]\n[b,Bob,36]\t[b,c,sigue]\t[c,Charlie,30]\t[c,b,sigue]\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774997_1174344555","id":"20181027-015533_344573808","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:09-0300","dateFinished":"2020-11-08T19:54:10-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62428"},{"text":"%pyspark\n# Despues se pueden aplicar filtros para queries mas complejos.\nz.show(motifs.filter(\"b.age > 30\"))\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:10-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"a":"string","e1":"string","b":"string","e2":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"a\te1\tb\te2\n[c,Charlie,30]\t[c,b,sigue]\t[b,Bob,36]\t[b,c,sigue]\n"},{"type":"TEXT","data":"\n"}]},"apps":[],"jobName":"paragraph_1604845774997_-688645712","id":"20201030-112416_1681452862","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:10-0300","dateFinished":"2020-11-08T19:54:10-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62429"},{"text":"%md\n## Visualización\n\nA continuación visualizaremos con [Gephi](https://gephi.org/) la parte del grafo (subgrafo) que contiene los mayores influencers.\n\nPara ello generaremos archivos *csv* como entrada de esta herramienta ","user":"anonymous","dateUpdated":"2020-11-08T19:54:10-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Visualización</h2>\n<p>A continuación visualizaremos con <a href=\"https://gephi.org/\">Gephi</a> la parte del grafo (subgrafo) que contiene los mayores influencers.</p>\n<p>Para ello generaremos archivos <em>csv</em> como entrada de esta herramienta</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774997_-1880352866","id":"20171102-160936_360694508","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62430"},{"text":"%pyspark\n\nminCI = 29000000\nminDegree = 600\n\n# tomo los usarios con mayor influencia o con más conecciones\nciTops = collectiveInfluence \\\n    .filter((col(\"ci\") >= minCI) | (col(\"degree\") >= minDegree))\n\ngInfluencers = GraphFrame(ciTops, graph.edges)\n\n# Tomo solo las aristas que tengan vértices\nveTops = gInfluencers.find(\"(a)-[e]->(b)\") \\\n                .cache()\n      \n                \nprint(\"Cantidad de top influencers:\", veTops.count())\n\nveTops.printSchema()\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:10-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"results":{"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"a":"string","e":"string","b":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Cantidad de top influencers: 35\nroot\n |-- a: struct (nullable = false)\n |    |-- ci: long (nullable = true)\n |    |-- id: string (nullable = true)\n |    |-- degree: integer (nullable = false)\n |-- e: struct (nullable = false)\n |    |-- src: string (nullable = true)\n |    |-- dst: string (nullable = true)\n |    |-- count_RT: long (nullable = true)\n |    |-- count_distinct_RT: long (nullable = false)\n |-- b: struct (nullable = false)\n |    |-- ci: long (nullable = true)\n |    |-- id: string (nullable = true)\n |    |-- degree: integer (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1604845774997_-1504386946","id":"20171102-000354_1806019706","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:10-0300","dateFinished":"2020-11-08T19:54:11-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62431"},{"text":"%pyspark\n\neTops = veTops.select(\"e.*\")\n\neTops.printSchema()\n\n# Grafo de los tops\ngTops = GraphFrame(ciTops, eTops)\n\n\n# guardo un csv con los vertices para Gephi \ngTops.vertices \\\n        .select(\"*\", col(\"id\").alias(\"Label\")) \\\n        .coalesce(1) \\\n        .write \\\n        .csv(\"top_influencers.csv\", mode=\"overwrite\", header=True)\n\n# guardo un csv con las aristas para Gephi\ngTops.edges \\\n        .select(col(\"src\").alias(\"Source\"), \n                col(\"dst\").alias(\"Target\"), \n                \"count_RT\",\"count_distinct_RT\") \\\n        .coalesce(1) \\\n        .write \\\n        .csv(\"top_edges.csv\", mode=\"overwrite\", header=True)\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:11-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":14,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- src: string (nullable = true)\n |-- dst: string (nullable = true)\n |-- count_RT: long (nullable = true)\n |-- count_distinct_RT: long (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1604845774997_1459966996","id":"20181027-020144_852191582","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:11-0300","dateFinished":"2020-11-08T19:54:11-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62432"},{"text":"%md\n### Gephi\n\nLanzar el programa desde una terminal ejecutando:\n\n```sh\ncd\nspark/gephi-0.9.2/bin/gephi\n```\n\nSeguir las instrucciones del profesor.","user":"anonymous","dateUpdated":"2020-11-08T19:54:11-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Gephi</h3>\n<p>Lanzar el programa desde una terminal ejecutando:</p>\n<pre><code class=\"sh\">cd\nspark/gephi-0.9.2/bin/gephi\n</code></pre>\n<p>Seguir las instrucciones del profesor.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774998_611622376","id":"20171102-161414_1207858851","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62433"},{"text":"%md\n### Ejercicio\n\nComplete el siguiente programa para calcular el grafo de todas las posibles conexiones a los 5 mayores influenciadores y graficar el resultado con Gephi. \n\n#### Ayuda\n* Busque en la documentación [Api Datasets](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Dataset) algún método que devuelva las *n* primeras files de un Dataset equivalente a la directiva SQL `LIMIT`. \n* Para llenar el comando `find` busque la documentación de [Motif finding](https://graphframes.github.io/graphframes/docs/_site/user-guide.html#motif-finding).","user":"anonymous","dateUpdated":"2020-11-08T19:54:11-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Ejercicio</h3>\n<p>Complete el siguiente programa para calcular el grafo de todas las posibles conexiones a los 5 mayores influenciadores y graficar el resultado con Gephi. </p>\n<h4>Ayuda</h4>\n<ul>\n  <li>Busque en la documentación <a href=\"http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Dataset\">Api Datasets</a> algún método que devuelva las <em>n</em> primeras files de un Dataset equivalente a la directiva SQL <code>LIMIT</code>.</li>\n  <li>Para llenar el comando <code>find</code> busque la documentación de <a href=\"https://graphframes.github.io/graphframes/docs/_site/user-guide.html#motif-finding\">Motif finding</a>.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774998_527745073","id":"20171102-110542_600666434","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62434"},{"text":"%pyspark\n\n#take top n\ntopInfluencers = collectiveInfluence.limit(5) # solo los 5 primeros\n\n# Guardo Vértices\ntopInfluencers.select(\"*\", col(\"id\").alias(\"Label\")).coalesce(1) \\\n        .write \\\n        .csv(\"top_influencers2.csv\", mode=\"overwrite\", header=True)\n\ngTops2 = GraphFrame(topInfluencers, graph.edges)\n\neTops2 = gTops2.find(\"(a)-[e]->(b)\").select(col(\"e.src\").alias(\"Source\"),col(\"e.dst\").alias(\"Target\"), \"e.count_RT\", \"e.count_distinct_RT\")\n\neTops2.coalesce(1) \\\n        .write \\\n        .csv(\"top_edges2.csv\", mode=\"overwrite\", header=True)","user":"anonymous","dateUpdated":"2020-11-08T19:54:11-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":14,"title":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"a":"string","e":"string","b":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1604845774998_-665430596","id":"20171101-170622_751215254","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:11-0300","dateFinished":"2020-11-08T19:54:11-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62435"},{"text":"%md\n### Ejercicio\n\n0. Tomar el grafo de tweets y crear un dataframe con todas las aristas y vértices que forman triángulos dirigidos. O sea, todos los casos donde un usuario *A* retuitea a *B* que retuitea a *C* que retuitea a *A*.\n\n0. Hay casos donde los tres usuarios sean distintos?\n\n0. Graficar con Gephi el resultado.\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:11-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":12,"editorHide":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Ejercicio</h3>\n<ol>\n  <li>\n  <p>Tomar el grafo de tweets y crear un dataframe con todas las aristas y vértices que forman triángulos dirigidos. O sea, todos los casos donde un usuario <em>A</em> retuitea a <em>B</em> que retuitea a <em>C</em> que retuitea a <em>A</em>.</p></li>\n  <li>\n  <p>Hay casos donde los tres usuarios sean distintos?</p></li>\n  <li>\n  <p>Graficar con Gephi el resultado.</p></li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1604845774998_-931209269","id":"20201030-122513_420199213","dateCreated":"2020-11-08T11:29:34-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62436"},{"text":"%pyspark\nfrom pyspark.sql.functions import expr\n\n\ntriangles = graph.find(\"(a)-[e1]->(b); (b)-[e2]->(c); (c)-[e3]->(a)\") \\\n            .filter((col(\"a\") != col(\"b\")) & (col(\"b\") != col(\"c\")) & (col(\"c\") != col(\"a\")))\n\nnodes_a = triangles.select(expr(\"a.id\"))\nnodes_b = triangles.select(expr(\"b.id\"))\nnodes_c = triangles.select(expr(\"c.id\"))\nnodes = nodes_a.union(nodes_b).union(nodes_c).distinct()\n\n\nnodes.select(\"*\", col(\"id\").alias(\"Label\")).coalesce(1) \\\n        .write \\\n        .csv(\"triangle_nodes.csv\", mode=\"overwrite\", header=True)\n\nedges_1 = triangles.select(col(\"e1.src\").alias(\"Source\"), col(\"e1.dst\").alias(\"Target\"))\nedges_2 = triangles.select(col(\"e2.src\").alias(\"Source\"), col(\"e2.dst\").alias(\"Target\"))\nedges_3 = triangles.select(col(\"e3.src\").alias(\"Source\"), col(\"e3.dst\").alias(\"Target\"))\n\nedges = edges_1.union(edges_2).union(edges_3).distinct()\n\n\nedges.coalesce(1) \\\n        .write \\\n        .csv(\"triangles_edges.csv\", mode=\"overwrite\", header=True)\n\n#z.show(edges)","user":"anonymous","dateUpdated":"2020-11-08T19:54:11-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"a":"string","e1":"string","b":"string","e2":"string","c":"string","e3":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Source":"string","Target":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1604872551768_-8646110","id":"20201108-185551_1769688009","dateCreated":"2020-11-08T18:55:51-0300","dateStarted":"2020-11-08T19:54:11-0300","dateFinished":"2020-11-08T19:54:15-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62437"},{"title":"FIN","text":"val baseDir=\"https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases\"\n\nz.put(\"baseDir\", baseDir)\nprint(\"\"\"%html\n<script>\n    var heads = document.getElementsByTagName('h2');\n    var numHeads = heads.length;\n    var inner = \"\";\n    var i = 0;\n    var j = 0;\n    while (i < numHeads){\n        inner = heads[i].innerHTML;\n        if (inner.search(\".-\") != -1 ) {\n            j++;\n            heads[i].innerHTML = inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n</script>\n\"\"\")\n","user":"anonymous","dateUpdated":"2020-11-08T19:54:15-0300","config":{"tableHide":true,"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<script>\n    var heads = document.getElementsByTagName('h2');\n    var numHeads = heads.length;\n    var inner = \"\";\n    var i = 0;\n    var j = 0;\n    while (i < numHeads){\n        inner = heads[i].innerHTML;\n        if (inner.search(\".-\") != -1 ) {\n            j++;\n            heads[i].innerHTML = inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n</script>\nbaseDir: String = https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases\n"}]},"apps":[],"jobName":"paragraph_1604845774998_-1936537019","id":"20171010-191336_1667301043","dateCreated":"2020-11-08T11:29:34-0300","dateStarted":"2020-11-08T19:54:15-0300","dateFinished":"2020-11-08T19:54:15-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62438"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1604876055428_964708914","id":"20201108-195415_115624726","dateCreated":"2020-11-08T19:54:15-0300","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:62439"}],"name":"Diplodatos/Clase 07 - Grandes Grafos Sociales","id":"2FQAQQFUF","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}